function [ result ] = f_nExp( data_handle, option, varargin )
%F_NEXP Summary of this function goes here
%   Detailed explanation goes here
%table contents must all have default values
parameters=struct('note','',...
    'operator','f_nExp',...
    'fit_t0',0,...
    'fit_t1',9e-9,...
    'initial_guess',[1e-9,3e-9],...
    'bg_threshold',10);
result=false;
switch option
    case 'add_data'
        current_data=data_handle.current_data;
        switch data_handle.data(current_data).datatype
            case {'3D_data_trace_image'}
                result=data_handle.data(current_data);
                result.dataname=cat(2,data_handle.data(current_data).dataname,'-',parameters.operator);
                
                result.datatype='2D_parameter_map';
                result.datainfo=setstructfields(data_handle.data(current_data).datainfo,parameters);%parameters field will replace duplicate field in data
                result.datainfo.note=data_handle.data(current_data).datainfo.note;
                result.dataval=[];
                result.datainfo.parent_data=data_handle.data(current_data).datainfo.data_idx;
                fprintf('%s\n','New container from f_radial_profile added');
            case {'1D_data_trace'}
                result=data_handle.data(current_data);
                result.dataname=cat(2,data_handle.data(current_data).dataname,'-',parameters.operator);
                
                result.datatype='0D_parameter_point';
                result.datainfo=setstructfields(data_handle.data(current_data).datainfo,parameters);%parameters field will replace duplicate field in data
                result.datainfo.note=data_handle.data(current_data).datainfo.note;
                result.dataval=[];
                result.datainfo.parent_data=data_handle.data(current_data).datainfo.data_idx;
            otherwise
                fprintf('%s\n','unknown data type to process');
                result=[];
        end
    case 'modify_parameters'
        current_data=data_handle.current_data;
        %change parameters from this method only
        parameters=varargin{1:2:end};
        val=varargin{2:2:end};
        switch parameters
            case 'note'
                data_handle.data(current_data).datainfo.note=num2str(val);
                result=1;
            case 'operator'
                errordlg('Unauthorised to change parameter');
                result=0;
            case 'fit_t0'
                val=str2double(val);
                if val>=data_handle.data(current_data).datainfo.fit_t1;
                    fprintf('fit_t0 must be strictly < fit_t1\n');
                else
                    data_handle.data(current_data).datainfo.fit_t0=val;
                end
            case 'fit_t1'
                val=str2double(val);
                if val<=data_handle.data(current_data).datainfo.fit_t0;
                    fprintf('fit_t1 must be strictly > fit_t0\n');
                else
                    data_handle.data(current_data).datainfo.fit_t1=val;
                end
            case 'initial_guess'
                data_handle.data(current_data).datainfo.initial_guess=str2double(val);
            case 'bg_threshold'
                data_handle.data(current_data).datainfo.bg_threshold=str2double(val);
        end
        
    case 'calculate_data'
        current_data=data_handle.current_data;
        parent_data=data_handle.data(current_data).datainfo.parent_data;
        data=data_handle.data(parent_data).dataval;
        num_param=numel(data_handle.data(current_data).datainfo.initial_guess(:));
        switch data_handle.data(current_data).datatype
            case {'2D_parameter_map'}%originated from 3D traces_image
                px_lim=length(data_handle.data(current_data).datainfo.x);
                py_lim=length(data_handle.data(current_data).datainfo.y);
                xbin=data_handle.data(current_data).datainfo.bin_x;
                ybin=data_handle.data(current_data).datainfo.bin_y;
                p_total=(px_lim*py_lim);
                t=data_handle.data(current_data).datainfo.t;
                
                val=zeros(num_param*2,px_lim*py_lim);
                I=sum(data(1:end,:),2);
                [~,max_idx]=max(I);
                t_fit=(t>=t(max_idx))&(t<=(data_handle.data(current_data).datainfo.fit_t1+t(max_idx)));
                min_threshold=data_handle.data(current_data).datainfo.bg_threshold;
                initial_val=1./data_handle.data(current_data).datainfo.initial_guess(:)';
                for p_idx=1:p_total
                    %xpos=mod(p_idx-1,py_lim)+1;ypos=ceil(p_idx/px_lim);
                    xpos=mod(p_idx-1,px_lim)+1;ypos=ceil(p_idx/px_lim);
                    xys=[ypos,xpos];
                    calc_idx=repmat([xys(2)-xbin:1:xys(2)+xbin],2*ybin+1,1)'+(repmat([xys(1)-ybin:1:xys(1)+ybin],2*xbin+1,1)-1)*px_lim;
                    calc_idx=calc_idx(:);
                    calc_idx(calc_idx<1)=[];
                    calc_idx(calc_idx>px_lim*py_lim)=[];
                    raw=sum(data(t_fit,calc_idx),2);
                    if mean(raw(ceil(numel(raw)/10):end))>min_threshold
                        % actual fitting part
                        estimate=fast_chi2_fit(t(t_fit),raw./max(raw(:)),initial_val);
                        estimate(3:4)=1./estimate(3:4);
                        val(:,p_idx)=estimate(:);
                    else
                        val(:,p_idx)=nan(num_param*2,1);
                    end
                end
                data_handle.update_data('dataval',reshape(val,size(val,1),px_lim,py_lim));
                result=true;
            case {'0D_parameter_point'}%originated from 1D traces
                min_threshold=data_handle.data(current_data).datainfo.bg_threshold;
                t=data_handle.data(current_data).datainfo.t;
                t_fit=(t>=data_handle.data(current_data).datainfo.fit_t0);
                val=calculate_ntc(t(t_fit),data_handle.data(parent_data).dataval(t_fit),[],min_threshold,data_handle.data(current_data).datainfo.fit_t1);
                data_handle.update_data('dataval',val);
                fprintf('NTC = %g\n',val);
                result=1;
        end
    case 'calculate_roi_data'
        %{
        param=varargin{1:2:end};
        val=varargin{2:2:end};
        switch param
            case 'output'
                panel=val;
        end
        current_data=data_handle.current_data;
        current_roi=data_handle.data(current_data).current_roi;
        idx=cell2mat({data_handle.data(current_data).ROI(current_roi).idx}');
        data=data_handle.data(current_data).dataval;
        switch data_handle.data(current_data).datatype
            case {'3D_data_trace_image'}%reduce to 0D
                data=nansum(data(:,idx),2);
                t=data_handle.data(current_data).datainfo.t;
                % --- get parameters ---
                f_name=fieldnames(parameters);f_name=f_name(3:end);
                val=cellfun(@(x)num2str(parameters.(x)),f_name,'UniformOutput',false);
                %ask for new parameters value
                options.Resize='on';options.WindowStyle='modal';options.Interpreter='none';
                set(0,'DefaultUicontrolBackgroundColor',[0.7,0.7,0.7]);
                set(0,'DefaultUicontrolForegroundColor','k');
                answers=inputdlg(f_name,'Input parameters',1,val,options);
                set(0,'DefaultUicontrolBackgroundColor','k');
                set(0,'DefaultUicontrolForegroundColor','w');
                if ~isempty(answers)
                    answers=str2double(answers);
                    original=cell(length(answers),1);changes=cell(length(answers),1);
                    %reassign parameters
                    for m=1:length(answers)
                        original{m}=cat(2,'''',f_name{m},''',',num2str(parameters.(f_name{m})));
                        changes{m}=cat(2,'''',f_name{m},''',',num2str(answers(m)));
                        parameters.(f_name{m})=answers(m);
                    end
                    % --- end ---
                    t_fit=t(t>=parameters.fit_t0)&(t<=parameters.fit_t1);
                    result=calculate_ntc(t(t_fit),data,[],parameters.bg_threshold);
                    plot(panel.PANEL_HIST,result,current_data,'MarkerFaceColor',rand(3,1),'Marker','s','MarkerSize',5,'LineStyle','none','MarkerEdgeColor','y');
                    xlim(panel.PANEL_HIST,'auto');
                    ylim(panel.PANEL_HIST,'auto');
                    fprintf('NTC = %g\n',result);
                    rewrite_mfile('f_NTC',original,changes);
                else
                    fprintf('NTC calculation cancelled\n');
                end
            case {'2D_parameter_map','2D_data_image'}%return mean value in map
                data=data(idx);
                result=squeeze(nanmean(data));
                plot(panel.PANEL_HIST,result,current_data,'MarkerFaceColor',rand(3,1),'Marker','s','MarkerSize',5,'LineStyle','none','MarkerEdgeColor','y');
                xlim(panel.PANEL_HIST,'auto');
                ylim(panel.PANEL_HIST,'auto');
                fprintf('Mean NTC = %g\n',result);
            case {'1D_data_trace'}
                
        end
        %}
end


    function estimates=fast_chi2_fit(t,data,parameter)
        parameter=parameter(:)';
        m=numel(t);
        n=numel(parameter);
        [estimates,~,flag] = fminsearch(@expfitfun,parameter,optimset('Display','off','MaxFunEvals',1e6,'MaxIter',1e6,'TolFun',1e-4),t,data);
        if flag<=0
            estimates=nan(size(estimates));
            coeff=nan(size(coeff));
            disp 'no fit';
        end
        %residue=expfitfun(estimates,data(INFOS.Fit_t0:INFOS.Fit_t1,1),data(INFOS.Fit_t0:INFOS.Fit_t1,2));
        estimates = horzcat(coeff,estimates');
        
        function res = expfitfun(lambda,t,y)
            X = zeros(m,n);
            for k = 1:n
                X(:,k) = exp(-lambda(k)*t);
            end
            %X=ifft(fft_FIR.*fft(X,m,1),m,1);
            coeff = X\y;
            coeff=coeff.*(coeff>=0);%constraint
            z = X*coeff;
            res=(sum((z-y).^2));%temporary measure head:tail
        end
    end
end

